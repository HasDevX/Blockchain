# ExplorerToken reverse proxy
# Place this file under /etc/nginx/sites-available/explorertoken.conf and symlink into sites-enabled.

upstream explorertoken_backend {
    server 127.0.0.1:4000;
    keepalive 32;
}

map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}

server {
    listen 80;
    server_name haswork.dev www.haswork.dev;

    # Enforce HTTPS via Cloudflare/Load Balancer. If terminating TLS on Nginx, add the cert/key blocks here.

    # Allow only expected verbs.
    if ($request_method !~ ^(GET|POST|HEAD|OPTIONS)$) {
        return 405;
    }

    # Serve the built frontend directly from disk.
    root /var/www/haswork.dev;
    index index.html;

    # Security headers (duplicated at the CDN edge for defense in depth).
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains" always;
    add_header Content-Security-Policy "default-src 'self'; img-src 'self' data:; style-src 'self' 'unsafe-inline'; object-src 'none'; frame-ancestors 'self'" always;

    # Pass real client IP details downstream.
    set_real_ip_from 0.0.0.0/0; # tighten to your proxy ranges (e.g. Cloudflare)
    real_ip_header X-Forwarded-For;
    real_ip_recursive on;

    # Cache static assets aggressively.
    location ~* \.(?:js|css|woff2?|ttf|svg|png|jpg)$ {
        expires 7d;
        add_header Cache-Control "public, max-age=604800, immutable";
        try_files $uri =404;
    }

    # SPA fallback for client-side routing.
    location / {
        try_files $uri $uri/ /index.html;
    }

    # Health endpoint proxies directly without SPA fallback.
    location = /health {
        proxy_pass http://explorertoken_backend$request_uri;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # API traffic proxy to Node backend.
    location /api/ {
        proxy_pass http://explorertoken_backend$request_uri;
        proxy_http_version 1.1;
        proxy_set_header Connection $connection_upgrade;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_read_timeout 60s;
    }

    # Optional: serve well-known path for uptime checks.
    location = /.well-known/uptime {
        return 200 'ok';
        add_header Content-Type text/plain;
    }
}
